<%

// Processing buttonts and tabs
let menuButtons = [];
let tabsContent = [];
config.elementos.forEach( e => {
  menuButtons.push(`<button class="tablinks" onclick="openTab(event, '${e.id}')">${e.nome}</button>`);
  tabsContent.push(`
    <div id="${e.id}" class="tabcontent">
      <button class='add-element'> <i class="fas fa-plus"></i> </button>
    </div>
  `);
});

%>
<!DOCTYPE html>
<html>

  <head>
    <meta charset="UTF-8">
    <title></title>
    <link rel="stylesheet" type="text/css" href="assets/css/mainPage.css" />
    <script src="assets/js/plain-draggable.min.js"></script>
    <link href="assets/css/all.css" rel="stylesheet"> <%# load fontawesome styles %>
  </head>

  <body>
    <%# Vertical Tab %>
    <div class="tab">
        <%- menuButtons.join('\n'); %>
    </div>


    <div id="width-selector">
      <!-- Width selector -->
    </div>

    <!-- Tab content -->
    <div id="none" class="tabcontent"> <!-- Hidden tab content -->
      <p> Escolha uma aba para come√ßar </p>
    </div>

    <%- tabsContent.join('\n'); %>

    <script src="assets/js/mainPage.js"></script>
    <script>
      //onChange event
      function inputNumber(input,type){

        /*
          rangeLimiter usage for handling exceptions
        */
        let damage = input.parentElement.previousElementSibling.textContent;
        let val = parseInt(input.value);
        let min = 0;
        let max = 20;
        if( type == 'fp' ){
          max = 10;
          min = ( damage == 'Fissuras' ? 2 : 0);
        }
        if( type == 'fi' ){
          min = 0;
          max = 4;
        }
        input.value = rangeLimiter(val,min,max);

        /*
          Live Calculate Element Results
        */
        let toSend = [];
        let element = input.parentElement.parentElement.parentElement;
        let rows = element.querySelectorAll('.data-row');
        let gde = element.querySelector('#gde');
        let ndp = element.querySelector('#ndp');

        rows.forEach( row => {
          toSend.push({
            fp: row.querySelector('.fp').value,
            fi: row.querySelector('.fi').value,
          });
        });
        let response = ipcRenderer.sendSync('calc',toSend);
        console.log(response);
        gde.innerText = response.gde.toFixed(2);
        ndp.innerText = response.ndp.nivel;
        rows.forEach( (row,i) => {
          row.querySelector('.d').innerText = response.d[i].toFixed(2);
        });
      }
    </script>
  </body>

</html>
<% ejse.stopListening() %>
